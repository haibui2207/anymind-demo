{"version":3,"sources":["utils/apis.ts","providers/ConversationProvider.tsx","assets/images/user-01.svg","assets/images/user-02.svg","assets/images/user-03.svg","utils/jss.ts","constants/COLORS.ts","constants/BREAKPOINTS.ts","components/Select/select.styles.ts","components/Select/Select.tsx","components/StaticHTML/StaticHTML.tsx","containers/Main/Sidebar/sidebar.styles.ts","containers/Main/Sidebar/Sidebar.tsx","assets/images/empty-conversation.jpg","containers/Main/Conversation/Empty/empty.styles.ts","containers/Main/Conversation/Empty/Empty.tsx","containers/Main/Conversation/Messages/Message/message.styles.ts","containers/Main/Conversation/Messages/Message/Message.tsx","containers/Main/Conversation/Messages/messages.styles.ts","containers/Main/Conversation/Messages/Messages.tsx","containers/Main/Conversation/conversation.styles.ts","containers/Main/Conversation/Conversation.tsx","containers/Main/main.styles.ts","containers/Main/Main.tsx","providers/ApolloProvider.tsx","reportWebVitals.ts","index.tsx"],"names":["FETCH_LATEST_MESSAGES","gql","FETCH_MORE_MESSAGES","POST_MESSAGE","defaultContextValue","users","channels","messages","draftMessage","undefined","activeUser","activeChannel","activeSidebar","setUsers","setChannels","setMessages","setDraftMessage","setActiveUser","setActiveChannel","setActiveSidebar","ConversationContext","createContext","useConversationContext","useContext","ConversationProvider","children","useState","restoreData","useCallback","data","localStorage","getItem","jsonData","JSON","parse","persistData","setItem","stringify","useEffect","window","addEventListener","removeEventListener","Provider","value","rem","sizeInPx","withUnit","baseSize","toString","concat","createUseStyles","select","fontWeight","fontSize","minHeight","borderRadius","boxShadow","borderColor","COLORS","backgroundColor","paddingLeft","color","whiteSpace","display","height","padding","alignItems","BREAKPOINTS","Select","id","name","options","onChange","disabled","className","dataTest","restProps","classes","useStyles","instanceId","classNames","classNamePrefix","isDisabled","components","DropdownIndicator","props","defaultProps","isSearchable","memo","StaticHTML","stringHtml","cleanedXss","dompurify","sanitize","ADD_ATTR","dangerouslySetInnerHTML","__html","root","overflow","width","boxSizing","transform","transition","infoWrapper","marginBottom","infoTitle","marginTop","lineHeight","infoGroup","flex","avatarWrapper","justifyContent","marginRight","avatar","title","margin","listChannels","listStyle","channelItem","link","textDecoration","position","top","left","zIndex","toggleButton","right","cursor","border","Sidebar","ref","useRef","handleChannelClick","channel","handleUserSelectChange","user","listener","event","current","contains","target","document","show","alt","src","getOptionLabel","getOptionValue","map","key","href","type","active","onClick","e","preventDefault","flexDirection","textAlign","image","maxWidth","description","Empty","coverImage","marginLeft","userName","dateTime","content","message","Message","text","datetime","isSender","formatDateTime","Date","toLocaleTimeString","moreButton","background","Messages","length","shownMoreButton","setMoreButtonStatus","formattedMessages","useMemo","sort","a","b","valueOf","find","userId","reduce","rs","cr","findIndex","i","messageId","push","scrollTop","scrollHeight","handleFetchMoreMessagesSuccess","fetchMoreMessages","handleFetchMoreMessagesFailed","error","alert","console","useLazyQuery","apiUtil","onCompleted","onError","fetchingMoreMessages","loading","handleButtonClick","variables","channelId","old","header","borderBottom","errorPopup","bottom","chatBox","maxHeight","sendButton","opacity","Conversation","shownErrorPopup","setErrorPopupStatus","handlePostMessageSuccess","newMessages","postMessage","messagesBox","getElementById","handlePostMessageFailed","setTimeout","handleFetchLatestMessagesSuccess","fetchLatestMessages","handleFetchLatestMessagesFailed","useMutation","sendingMessage","notifyOnNetworkStatusChange","called","refetch","handleEditorChange","handleSubmit","editor","ClassicEditor","getData","config","placeholder","logo","Main","fetchLatestMessagesCalled","refetchLatestMessages","fetchMoreMessagesCalled","refetchMoreMessages","initConversationValue","mockUsers","avatar01","avatar02","avatar03","mockChannels","timer","setInterval","clearInterval","handleToggleMenu","client","ApolloClient","uri","cache","InMemoryCache","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.9cf07061.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst FETCH_LATEST_MESSAGES = gql`\r\n  query fetchLatestMessages($channelId: String!) {\r\n    fetchLatestMessages(channelId: $channelId) {\r\n      messageId\r\n      text\r\n      datetime\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_MORE_MESSAGES = gql`\r\n  query fetchMoreMessages($channelId: String!, $messageId: String!, $old: Boolean!) {\r\n    fetchMoreMessages(channelId: $channelId, messageId: $messageId, old: $old) {\r\n      messageId\r\n      text\r\n      datetime\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nconst POST_MESSAGE = gql`\r\n  mutation postMessage($channelId: String!, $text: String!, $userId: String!) {\r\n    postMessage(channelId: $channelId, text: $text, userId: $userId) {\r\n      messageId\r\n      text\r\n      datetime\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nexport default {\r\n  FETCH_LATEST_MESSAGES,\r\n  FETCH_MORE_MESSAGES,\r\n  POST_MESSAGE,\r\n};\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { IChannel, IDraftMessage, IMessage, IUser } from \"../models\";\r\n\r\nexport interface IConversation {\r\n  users: IUser[];\r\n  channels: IChannel[];\r\n  messages: IMessage[];\r\n  draftMessage?: IDraftMessage;\r\n  activeUser?: IUser;\r\n  activeChannel?: IChannel;\r\n  activeSidebar: boolean;\r\n  setUsers: (users: IUser[]) => void;\r\n  setChannels: (channels: IChannel[]) => void;\r\n  setMessages: (messages: IMessage[]) => void;\r\n  setActiveUser: (user?: IUser) => void;\r\n  setActiveChannel: (channel?: IChannel) => void;\r\n  setDraftMessage: (draftMessage?: IDraftMessage) => void;\r\n  setActiveSidebar: (active: boolean) => void;\r\n}\r\n\r\nexport const defaultContextValue: IConversation = {\r\n  users: [],\r\n  channels: [],\r\n  messages: [],\r\n  draftMessage: undefined,\r\n  activeUser: undefined,\r\n  activeChannel: undefined,\r\n  activeSidebar: false,\r\n  setUsers: () => {},\r\n  setChannels: () => {},\r\n  setMessages: () => {},\r\n  setDraftMessage: () => {},\r\n  setActiveUser: () => {},\r\n  setActiveChannel: () => {},\r\n  setActiveSidebar: () => {},\r\n};\r\n\r\nexport const ConversationContext = createContext<IConversation>(\r\n  defaultContextValue\r\n);\r\n\r\nexport const useConversationContext = () =>\r\n  useContext<IConversation>(ConversationContext);\r\n\r\ninterface IProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ConversationProvider: React.FC<IProps> = ({ children }) => {\r\n  const [users, setUsers] = useState<IUser[]>([]);\r\n  const [channels, setChannels] = useState<IChannel[]>([]);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const [draftMessage, setDraftMessage] = useState<IDraftMessage | undefined>(\r\n    undefined\r\n  );\r\n  const [activeUser, setActiveUser] = useState<IUser | undefined>(undefined);\r\n  const [activeChannel, setActiveChannel] = useState<IChannel | undefined>(\r\n    undefined\r\n  );\r\n  const [activeSidebar, setActiveSidebar] = useState<boolean>(false);\r\n\r\n  const restoreData = useCallback((): void => {\r\n    const data = localStorage.getItem(\"conversationContext\");\r\n    if (data) {\r\n      const jsonData = JSON.parse(data) as IConversation;\r\n      if (jsonData.users) setUsers(jsonData.users);\r\n      if (jsonData.channels) setChannels(jsonData.channels);\r\n      if (jsonData.draftMessage) setDraftMessage(jsonData.draftMessage);\r\n      if (jsonData.activeUser) setActiveUser(jsonData.activeUser);\r\n      if (jsonData.activeChannel) setActiveChannel(jsonData.activeChannel);\r\n    }\r\n  }, []);\r\n\r\n  const persistData = useCallback((): void => {\r\n    localStorage.setItem(\r\n      \"conversationContext\",\r\n      JSON.stringify({\r\n        users,\r\n        channels,\r\n        draftMessage,\r\n        activeUser,\r\n        activeChannel,\r\n      })\r\n    );\r\n  }, [users, channels, draftMessage, messages, activeUser, activeChannel]);\r\n\r\n  useEffect((): void => {\r\n    restoreData();\r\n  }, []);\r\n\r\n  useEffect((): (() => void) => {\r\n    window.addEventListener(\"beforeunload\", persistData);\r\n\r\n    return (): void => {\r\n      persistData();\r\n      window.removeEventListener(\"beforeunload\", persistData);\r\n    };\r\n  }, [persistData]);\r\n\r\n  return (\r\n    <ConversationContext.Provider\r\n      value={{\r\n        users,\r\n        channels,\r\n        messages,\r\n        draftMessage,\r\n        activeUser,\r\n        activeChannel,\r\n        activeSidebar,\r\n        setUsers,\r\n        setChannels,\r\n        setMessages,\r\n        setDraftMessage,\r\n        setActiveUser,\r\n        setActiveChannel,\r\n        setActiveSidebar,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConversationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ConversationProvider;\r\n","export default __webpack_public_path__ + \"static/media/user-01.b0d542e2.svg\";","export default __webpack_public_path__ + \"static/media/user-02.c6075d3f.svg\";","export default __webpack_public_path__ + \"static/media/user-03.fae8153f.svg\";","export const rem = (\r\n  sizeInPx: number,\r\n  withUnit: boolean = true,\r\n  baseSize: number = 16,\r\n) => (sizeInPx / baseSize).toString().concat(!withUnit ? '' : 'rem');\r\n\r\nexport default { rem };\r\n","export default {\n  primary: '#C80030',\n\n  textWhite: '#fff',\n  textBlack: '#333',\n  textGray: '#8a8a8a',\n\n  bgWhite: '#fff',\n  bgBlack: '#1a1d21',\n  bgBlack01: '#141414',\n  bgGray: '#F9F9F9',\n\n  borderWhite: '#fff',\n  borderBlack: '#333',\n  borderGray: '#8a8a8a',\n  borderBlue: '#e6ecf3',\n};\n","export default {\n  maxXs: 374,\n  minSm: 375,\n  maxSm: 575,\n  minMd: 576,\n  maxMd: 767,\n  minLg: 768,\n  maxLg: 991,\n  minXl: 992,\n  maxXl: 1199,\n  minXXl: 1200,\n  maxXXl: 1439,\n  minXXXl: 1440,\n  maxXXXl: 1679,\n};\n","import { createUseStyles } from 'react-jss';\n\nimport { rem } from '../../utils/jss';\nimport COLORS from '../../constants/COLORS';\nimport BREAKPOINTS from '../../constants/BREAKPOINTS';\n\nexport default createUseStyles({\n  select: {\n    fontWeight: 400,\n    fontSize: rem(16),\n    '& .custom-react-select__control': {\n      minHeight: rem(32),\n      borderRadius: rem(4),\n      boxShadow: 'none',\n      borderColor: COLORS.borderGray,\n    },\n    '& .custom-react-select__control--is-disabled': {\n      backgroundColor: COLORS.bgGray,\n    },\n    '& .custom-react-select__control--menu-is-open': {\n      borderColor: COLORS.primary,\n      '&:hover': { borderColor: COLORS.primary },\n    },\n    '& .custom-react-select__value-container': {\n      paddingLeft: rem(14),\n    },\n    '& .custom-react-select__placeholder': {\n      color: COLORS.textGray,\n      fontSize: 'inherit',\n      fontWeight: 'inherit',\n      whiteSpace: 'nowrap',\n    },\n    '& .custom-react-select__indicator-separator': {\n      display: 'none',\n    },\n    '& .custom-react-select__single-value': {\n      color: COLORS.textBlack,\n      fontSize: 'inherit',\n      fontWeight: 'inherit',\n    },\n    '& .custom-react-select__single-value--is-disabled': {\n      color: COLORS.textGray,\n    },\n    '& .custom-react-select__indicator': {\n      height: rem(32),\n      padding: [0, rem(12)],\n      alignItems: 'center',\n      '& > [class^=icon-]': { fontSize: rem(8), color: COLORS.textBlack },\n    },\n    '& .custom-react-select__option': {\n      fontSize: 'inherit',\n      fontWeight: 'inherit',\n    },\n  },\n\n  [`@media only screen and (max-width: ${BREAKPOINTS.maxSm}px)`]: {\n    select: {\n      fontSize: rem(14),\n      '& .custom-react-select__control': { minHeight: rem(30) },\n      '& .custom-react-select__indicator': { height: rem(30) },\n    },\n  },\n});\n","import React, { memo } from 'react';\nimport ReactSelect, { components } from 'react-select';\nimport classNames from 'classnames';\n\nimport useStyles from './select.styles';\n\ninterface IProps {\n  name: string;\n  options: { label?: string; value?: any; [key: string]: any }[];\n  onChange: (data: { name: string; value: any }) => void;\n  id?: string;\n  disabled?: boolean;\n  className?: string;\n  isSearchable?: boolean;\n  [key: string]: any;\n}\n\nconst Select: React.FC<IProps> = ({\n  id,\n  name,\n  options,\n  onChange,\n  disabled,\n  dataTest,\n  className,\n  ...restProps\n}) => {\n  const classes = useStyles();\n\n  return (\n    <ReactSelect\n      instanceId={id || name}\n      name={name}\n      onChange={(value) => onChange({ name, value })}\n      options={options}\n      className={classNames(classes.select, className)}\n      classNamePrefix=\"custom-react-select\"\n      isDisabled={disabled}\n      components={{\n        DropdownIndicator: (props) => (\n          <components.DropdownIndicator {...props}>\n            <i className=\"icon-triangle-down\" />\n          </components.DropdownIndicator>\n        ),\n      }}\n      {...restProps}\n    />\n  );\n};\nSelect.defaultProps = {\n  id: '',\n  className: '',\n  disabled: false,\n  isSearchable: false,\n};\n\nexport default memo(Select);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport dompurify from \"isomorphic-dompurify\";\n\ninterface IProps {\n  stringHtml: string;\n}\n\nconst StaticHTML: React.FC<IProps> = ({ stringHtml }) => {\n  const cleanedXss = dompurify.sanitize(stringHtml, {\n    ADD_ATTR: [\"target\"],\n  });\n  /* eslint-disable react/no-danger */\n  return <div dangerouslySetInnerHTML={{ __html: cleanedXss }} />;\n};\n\nStaticHTML.propTypes = {\n  stringHtml: PropTypes.string.isRequired,\n};\n\nexport default StaticHTML;\n","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../../utils/jss\";\r\nimport COLORS from \"../../../constants/COLORS\";\r\nimport BREAKPOINTS from \"../../../constants/BREAKPOINTS\";\r\n\r\nexport default createUseStyles({\r\n  root: {\r\n    overflow: \"auto\",\r\n    width: rem(320),\r\n    boxSizing: \"border-box\",\r\n    padding: [rem(16), rem(16), rem(24)],\r\n    backgroundColor: COLORS.bgBlack,\r\n    height: \"100%\",\r\n    transform: \"translateX(0)\",\r\n    transition: \"width .5s ease, padding .3s ease, transform .5s ease\",\r\n  },\r\n  infoWrapper: { display: \"flex\", alignItems: \"center\", marginBottom: rem(32) },\r\n  infoTitle: {\r\n    marginTop: 0,\r\n    marginBottom: rem(12),\r\n    fontSize: rem(14),\r\n    lineHeight: rem(20),\r\n    color: COLORS.textWhite,\r\n  },\r\n  infoGroup: { flex: 1 },\r\n  avatarWrapper: {\r\n    flex: \"none\",\r\n    backgroundColor: COLORS.bgWhite,\r\n    overflow: \"hidden\",\r\n    borderRadius: \"50%\",\r\n    width: rem(50),\r\n    height: rem(50),\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginRight: rem(12),\r\n  },\r\n  avatar: { width: \"100%\" },\r\n  title: {\r\n    margin: [rem(16), 0, rem(8)],\r\n    fontSize: rem(20),\r\n    lineHeight: rem(24),\r\n    color: COLORS.textWhite,\r\n  },\r\n  listChannels: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyle: \"none\",\r\n  },\r\n  channelItem: {},\r\n  link: {\r\n    display: \"block\",\r\n    color: COLORS.textGray,\r\n    textDecoration: \"none\",\r\n    padding: [rem(12)],\r\n    fontSize: rem(16),\r\n    lineHeight: rem(24),\r\n    \"&.active\": {\r\n      fontWeight: \"bold\",\r\n      color: COLORS.textWhite,\r\n    },\r\n  },\r\n\r\n  [`@media only screen and (max-width: ${BREAKPOINTS.maxLg}px)`]: {\r\n    root: { width: rem(260) },\r\n  },\r\n  [`@media only screen and (max-width: ${BREAKPOINTS.maxMd}px)`]: {\r\n    root: { width: rem(240), padding: [rem(16), rem(8), rem(24)] },\r\n    infoWrapper: { marginBottom: rem(24) },\r\n    infoTitle: { fontSize: rem(12), lineHeight: rem(16) },\r\n    avatarWrapper: { width: rem(40), height: rem(40), marginRight: rem(8) },\r\n    title: { fontSize: rem(16), lineHeight: rem(20) },\r\n    link: { padding: [rem(8)], fontSize: rem(12), lineHeight: rem(16) },\r\n  },\r\n  [`@media only screen and (max-width: ${BREAKPOINTS.maxSm}px)`]: {\r\n    root: {\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      zIndex: 1,\r\n      \"&:not(.show)\": { transform: \"translateX(-100%)\" },\r\n    },\r\n    toggleButton: {\r\n      display: \"block\",\r\n      position: \"absolute\",\r\n      right: 0,\r\n      width: rem(50),\r\n      height: rem(50),\r\n      transform: \"translateX(100%)\",\r\n      color: COLORS.textWhite,\r\n      cursor: \"pointer\",\r\n      backgroundColor: COLORS.bgBlack,\r\n      border: \"none\",\r\n    },\r\n  },\r\n});\r\n","import React, { memo, useCallback, useEffect, useRef } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { Select } from \"../../../components\";\r\nimport { IChannel, IUser } from \"../../../models\";\r\nimport { useConversationContext } from \"../../../providers/ConversationProvider\";\r\n\r\nimport useStyles from \"./sidebar.styles\";\r\n\r\nconst Sidebar: React.FC<{}> = () => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const classes = useStyles();\r\n  const {\r\n    users,\r\n    channels,\r\n    activeUser,\r\n    activeChannel,\r\n    activeSidebar,\r\n    setMessages,\r\n    setDraftMessage,\r\n    setActiveUser,\r\n    setActiveChannel,\r\n    setActiveSidebar,\r\n  } = useConversationContext();\r\n\r\n  const handleChannelClick = useCallback(\r\n    (channel: IChannel): void => {\r\n      if (activeChannel?.id !== channel.id) {\r\n        setActiveChannel(channel);\r\n        setMessages([]);\r\n        setActiveSidebar(false);\r\n        setDraftMessage(undefined);\r\n      }\r\n    },\r\n    [activeChannel]\r\n  );\r\n\r\n  const handleUserSelectChange = useCallback(\r\n    (user: IUser): void => {\r\n      if (activeUser?.id !== user.id) {\r\n        setActiveUser(user);\r\n      }\r\n    },\r\n    [activeUser]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const listener = (event: any): any => {\r\n      if (!ref.current || ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      if (activeSidebar) {\r\n        setActiveSidebar(!activeSidebar);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", listener);\r\n    document.addEventListener(\"touchstart\", listener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", listener);\r\n      document.removeEventListener(\"touchstart\", listener);\r\n    };\r\n  }, [ref, activeSidebar]);\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={classNames(\"custom-scrollbar\", classes.root, {\r\n        show: activeSidebar,\r\n      })}\r\n    >\r\n      <div className={classes.infoWrapper}>\r\n        <div className={classes.avatarWrapper}>\r\n          <img\r\n            alt={activeUser?.name}\r\n            src={activeUser?.avatar}\r\n            className={classes.avatar}\r\n            data-test=\"sidebar-active-user-avatar\"\r\n          />\r\n        </div>\r\n        <div className={classes.infoGroup}>\r\n          <h4 className={classes.infoTitle}>Switch user</h4>\r\n          <Select\r\n            name=\"user\"\r\n            options={users}\r\n            onChange={({ value }: { value: IUser }) =>\r\n              handleUserSelectChange(value)\r\n            }\r\n            value={activeUser}\r\n            getOptionLabel={(user: IUser): string => user.name}\r\n            getOptionValue={(user: IUser): string => user.name}\r\n          />\r\n        </div>\r\n      </div>\r\n      <h4 className={classes.title}>Channels</h4>\r\n      <ul className={classes.listChannels}>\r\n        {channels.map((channel: IChannel) => (\r\n          <li\r\n            key={channel.id}\r\n            className={classes.channelItem}\r\n            data-test=\"sidebar-channel-item\"\r\n          >\r\n            <a\r\n              href=\"/#\"\r\n              type=\"button\"\r\n              className={classNames(classes.link, {\r\n                active: activeChannel?.id === channel.id,\r\n              })}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleChannelClick(channel);\r\n              }}\r\n            >\r\n              #&nbsp;&nbsp;{channel.name}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Sidebar);\r\n","export default __webpack_public_path__ + \"static/media/empty-conversation.8fb4e916.jpg\";","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../../../utils/jss\";\r\n\r\nexport default createUseStyles({\r\n  root: {\r\n    padding: rem(16),\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    boxSizing: \"border-box\",\r\n    textAlign: \"center\",\r\n  },\r\n  image: { display: \"block\", width: \"100%\", maxWidth: rem(250) },\r\n  title: {\r\n    marginTop: rem(16),\r\n    marginBottom: 0,\r\n    fontSize: rem(32),\r\n    lineHeight: rem(48),\r\n  },\r\n  description: {\r\n    marginTop: rem(12),\r\n    marginBottom: 0,\r\n    fontSize: rem(16),\r\n    lineHeight: rem(24),\r\n  },\r\n});\r\n","import React, { memo } from \"react\";\r\n\r\nimport coverImage from \"../../../../assets/images/empty-conversation.jpg\";\r\n\r\nimport useStyles from \"./empty.styles\";\r\n\r\nconst Empty: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <img\r\n        alt=\"No message\"\r\n        className={classes.image}\r\n        src={coverImage}\r\n        data-test=\"empty-image\"\r\n      />\r\n      <h2 className={classes.title} data-test=\"empty-title\">\r\n        No message found\r\n      </h2>\r\n      <p className={classes.description} data-test=\"empty-description\">\r\n        Let's start your conversation\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Empty);\r\n","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../../../../utils/jss\";\r\nimport COLORS from \"../../../../../constants/COLORS\";\r\n\r\nexport default createUseStyles({\r\n  root: {\r\n    padding: rem(16),\r\n    overflow: \"auto\",\r\n    display: \"flex\",\r\n    boxSizing: \"border-box\",\r\n    \"&.reverse\": {\r\n      flexDirection: \"row-reverse\",\r\n      \"& $avatarWrapper\": {\r\n        marginRight: 0,\r\n        marginLeft: rem(12),\r\n      },\r\n    },\r\n  },\r\n  avatarWrapper: {\r\n    flex: \"none\",\r\n    backgroundColor: COLORS.bgWhite,\r\n    overflow: \"hidden\",\r\n    borderRadius: \"50%\",\r\n    width: rem(40),\r\n    height: rem(40),\r\n    position: \"relative\",\r\n    marginRight: rem(12),\r\n  },\r\n  avatar: {\r\n    width: \"100%\",\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  userName: {\r\n    marginBottom: 0,\r\n    marginTop: rem(4),\r\n    fontSize: rem(12),\r\n    lineHeight: rem(16),\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  dateTime: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"normal\",\r\n    color: COLORS.textGray,\r\n    fontSize: rem(10),\r\n    marginLeft: rem(12),\r\n  },\r\n  content: {},\r\n  message: {\r\n    fontSize: rem(14),\r\n    lineHeight: rem(16),\r\n  },\r\n});\r\n","import React, { memo, useCallback } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { IMessage, IUser } from \"../../../../../models\";\r\nimport { StaticHTML } from \"../../../../../components\";\r\n\r\nimport useStyles from \"./message.styles\";\r\n\r\ninterface IProps extends IMessage {\r\n  user?: IUser;\r\n  isSender: boolean;\r\n}\r\n\r\nconst Message: React.FC<IProps> = ({ user, text, datetime, isSender }) => {\r\n  const classes = useStyles();\r\n\r\n  const formatDateTime = useCallback(\r\n    (value): string => new Date(value).toLocaleTimeString(),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className={classNames(classes.root, isSender && \"reverse\")}>\r\n      <div className={classes.avatarWrapper}>\r\n        <img\r\n          alt={user?.name}\r\n          src={user?.avatar}\r\n          className={classes.avatar}\r\n          data-test=\"message-user-avatar\"\r\n        />\r\n      </div>\r\n      <div className={classes.content}>\r\n        <p className={classes.userName} data-test=\"message-user-name\">\r\n          {user?.name}\r\n          <span className={classes.dateTime} data-test=\"message-date-time\">\r\n            {formatDateTime(datetime)}\r\n          </span>\r\n        </p>\r\n        <div\r\n          className={classNames(\"ck-content\", classes.message)}\r\n          data-test=\"message-text\"\r\n        >\r\n          <StaticHTML stringHtml={text} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Message);\r\n","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../../../utils/jss\";\r\nimport COLORS from \"../../../../constants/COLORS\";\r\n\r\nexport default createUseStyles({\r\n  root: { overflow: \"auto\", height: \"100%\" },\r\n  moreButton: {\r\n    border: \"none\",\r\n    textAlign: \"center\",\r\n    fontSize: rem(14),\r\n    lineHeight: rem(16),\r\n    color: COLORS.textGray,\r\n    fontWeight: \"normal\",\r\n    background: \"transparent\",\r\n    display: \"block\",\r\n    margin: [rem(16), \"auto\"],\r\n    cursor: \"pointer\",\r\n    \"&:hover\": { color: COLORS.textBlack },\r\n  },\r\n});\r\n","import React, {\r\n  memo,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { ApolloError, useLazyQuery } from \"@apollo/client\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { apiUtil } from \"../../../../utils\";\r\nimport { IMessage, IUser } from \"../../../../models\";\r\nimport { useConversationContext } from \"../../../../providers/ConversationProvider\";\r\n\r\nimport Message from \"./Message\";\r\nimport useStyles from \"./messages.styles\";\r\n\r\ninterface IFormattedMessage extends IMessage {\r\n  user?: IUser;\r\n}\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const classes = useStyles();\r\n  const {\r\n    users,\r\n    messages,\r\n    activeUser,\r\n    activeChannel,\r\n    setMessages,\r\n  } = useConversationContext();\r\n  const [shownMoreButton, setMoreButtonStatus] = useState<boolean>(\r\n    messages.length >= 10\r\n  );\r\n  const formattedMessages = useMemo(\r\n    (): IFormattedMessage[] =>\r\n      messages\r\n        .sort(\r\n          (a, b): number =>\r\n            new Date(a.datetime).valueOf() - new Date(b.datetime).valueOf()\r\n        )\r\n        .map((message: IMessage) => ({\r\n          ...message,\r\n          user: users.find((user: IUser) => user.id === message.userId),\r\n        }))\r\n        .reduce((rs: IFormattedMessage[], cr: IFormattedMessage) => {\r\n          if (rs.findIndex((i) => i.messageId === cr.messageId) === -1) {\r\n            rs.push(cr);\r\n          }\r\n          return rs;\r\n        }, []),\r\n    [users, messages]\r\n  );\r\n\r\n  useEffect((): void => {\r\n    if (ref.current) {\r\n      ref.current.scrollTop = ref.current.scrollHeight;\r\n    }\r\n  }, [ref]);\r\n\r\n  const handleFetchMoreMessagesSuccess = useCallback(\r\n    (data: { fetchMoreMessages: IMessage[] }): void => {\r\n      if (data.fetchMoreMessages.length === 0) {\r\n        setMoreButtonStatus(false);\r\n      } else {\r\n        setMessages([...messages, ...data.fetchMoreMessages]);\r\n      }\r\n    },\r\n    [messages]\r\n  );\r\n\r\n  const handleFetchMoreMessagesFailed = useCallback(\r\n    (error: ApolloError): void => {\r\n      // TODO show error cannot get list messages\r\n      window.alert(\"Cannot fetch more messages\");\r\n      console.error(error);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [fetchMoreMessages, { loading: fetchingMoreMessages }] = useLazyQuery<{\r\n    fetchMoreMessages: IMessage[];\r\n  }>(apiUtil.FETCH_MORE_MESSAGES, {\r\n    onCompleted: handleFetchMoreMessagesSuccess,\r\n    onError: handleFetchMoreMessagesFailed,\r\n  });\r\n\r\n  const handleButtonClick = useCallback((): void => {\r\n    fetchMoreMessages({\r\n      variables: {\r\n        channelId: activeChannel?.id,\r\n        messageId: messages[0].messageId,\r\n        old: true,\r\n      },\r\n    });\r\n  }, [messages, activeChannel]);\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      id=\"messages-box\"\r\n      className={classNames(\"custom-scrollbar\", classes.root)}\r\n    >\r\n      {shownMoreButton ? (\r\n        <button\r\n          className={classes.moreButton}\r\n          onClick={handleButtonClick}\r\n          disabled={fetchingMoreMessages}\r\n        >\r\n          {fetchingMoreMessages ? (\r\n            <span>Loading...</span>\r\n          ) : (\r\n            <span>Click to load old messages</span>\r\n          )}\r\n        </button>\r\n      ) : null}\r\n      {formattedMessages.map(\r\n        (message: IFormattedMessage): React.ReactElement => (\r\n          <Message\r\n            key={message.messageId}\r\n            {...message}\r\n            isSender={message.userId === activeUser?.id}\r\n          />\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Messages);\r\n","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../../utils/jss\";\r\nimport COLORS from \"../../../constants/COLORS\";\r\n\r\nexport default createUseStyles({\r\n  root: {\r\n    flex: 1,\r\n    boxSizing: \"border-box\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    \"& .ck\": {\r\n      \"&.ck-editor\": { flex: 1 },\r\n      \"&.ck-toolbar\": { display: \"none\" },\r\n      \"&.ck-editor__main\": { height: \"100%\" },\r\n      \"&.ck-editor__editable\": {\r\n        height: \"100%\",\r\n        \"& p\": { fontSize: rem(14), lineHeight: rem(20) },\r\n      },\r\n      \"&.ck-editor__editable_inline\": {\r\n        border: \"none\",\r\n        \"&::-webkit-scrollbar\": { width: 10, height: 3 },\r\n        \"&::-webkit-scrollbar-track, &::-webkit-scrollbar-thumbhover\": {\r\n          background: \"transparent\",\r\n        },\r\n        \"&::-webkit-scrollbar-thumb\": {\r\n          background: \"rgba(178, 178, 178, 0.6)\",\r\n          borderRadius: 10,\r\n        },\r\n      },\r\n    },\r\n  },\r\n  header: {\r\n    flex: \"none\",\r\n    margin: 0,\r\n    padding: rem(16),\r\n    fontSize: rem(24),\r\n    lineHeight: rem(32),\r\n    borderBottom: `1px solid ${COLORS.borderBlue}`,\r\n  },\r\n  content: {\r\n    flex: \"1 0 0\",\r\n    overflow: \"hidden\",\r\n    borderBottom: `1px solid ${COLORS.borderBlue}`,\r\n    position: \"relative\",\r\n  },\r\n  errorPopup: {\r\n    position: \"absolute\",\r\n    bottom: rem(12),\r\n    left: \"50%\",\r\n    whiteSpace: \"nowrap\",\r\n    transform: \"translateX(-50%)\",\r\n    backgroundColor: COLORS.bgBlack,\r\n    padding: [rem(4), rem(16)],\r\n    fontSize: rem(12),\r\n    textAlign: \"center\",\r\n    lineHeight: rem(20),\r\n    borderRadius: rem(50),\r\n    color: COLORS.textWhite,\r\n  },\r\n  chatBox: {\r\n    flex: \"none\",\r\n    display: \"flex\",\r\n    minHeight: rem(40),\r\n    maxHeight: rem(120),\r\n  },\r\n  sendButton: {\r\n    flex: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100%\",\r\n    padding: rem(12),\r\n    width: rem(80),\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    color: COLORS.textWhite,\r\n    backgroundColor: COLORS.bgBlack,\r\n    transition: \"opacity .2s ease\",\r\n    \"&:not(:disabled):hover\": { opacity: 0.85 },\r\n    \"&:disabled\": { opacity: 0.5, cursor: \"not-allowed\" },\r\n  },\r\n});\r\n","import React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport { useLazyQuery, useMutation, ApolloError } from \"@apollo/client\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nimport { apiUtil } from \"../../../utils\";\r\nimport { IMessage } from \"../../../models\";\r\nimport { useConversationContext } from \"../../../providers/ConversationProvider\";\r\n\r\nimport Empty from \"./Empty\";\r\nimport Messages from \"./Messages\";\r\nimport useStyles from \"./conversation.styles\";\r\n\r\nconst Conversation: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    messages,\r\n    draftMessage,\r\n    activeUser,\r\n    activeChannel,\r\n    setMessages,\r\n    setDraftMessage,\r\n  } = useConversationContext();\r\n  const [shownErrorPopup, setErrorPopupStatus] = useState<boolean>(false);\r\n\r\n  const handlePostMessageSuccess = useCallback(\r\n    (data: { postMessage: IMessage }): void => {\r\n      const newMessages = [...messages];\r\n      newMessages.push(data.postMessage);\r\n      setDraftMessage(undefined);\r\n      setMessages(newMessages);\r\n      const messagesBox = document.getElementById(\"messages-box\");\r\n      if (messagesBox) {\r\n        messagesBox.scrollTop = messagesBox.scrollHeight;\r\n      }\r\n    },\r\n    [messages]\r\n  );\r\n\r\n  const handlePostMessageFailed = useCallback((): void => {\r\n    setErrorPopupStatus(true);\r\n    setTimeout((): void => {\r\n      setErrorPopupStatus(false);\r\n    }, 3000);\r\n  }, []);\r\n\r\n  const handleFetchLatestMessagesSuccess = useCallback(\r\n    (data: { fetchLatestMessages: IMessage[] }): void => {\r\n      setMessages([...data.fetchLatestMessages]);\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleFetchLatestMessagesFailed = useCallback(\r\n    (error: ApolloError): void => {\r\n      // TODO show error cannot get list messages\r\n      window.alert(\"Cannot fetch messages\");\r\n      console.error(error);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [postMessage, { loading: sendingMessage }] = useMutation<{\r\n    postMessage: IMessage;\r\n  }>(apiUtil.POST_MESSAGE, {\r\n    onCompleted: handlePostMessageSuccess,\r\n    onError: handlePostMessageFailed,\r\n  });\r\n\r\n  const [fetchLatestMessages, { called, refetch }] = useLazyQuery<{\r\n    fetchLatestMessages: IMessage[];\r\n  }>(apiUtil.FETCH_LATEST_MESSAGES, {\r\n    onCompleted: handleFetchLatestMessagesSuccess,\r\n    onError: handleFetchLatestMessagesFailed,\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  useEffect((): void => {\r\n    if (activeChannel) {\r\n      if (called && refetch) {\r\n        refetch({ channelId: activeChannel.id });\r\n      } else {\r\n        fetchLatestMessages({ variables: { channelId: activeChannel.id } });\r\n      }\r\n    }\r\n  }, [called, activeChannel]);\r\n\r\n  // TODO using debounce if necessary\r\n  const handleEditorChange = useCallback(\r\n    (text: string): void => {\r\n      setDraftMessage({\r\n        channelId: activeChannel?.id || \"\",\r\n        userId: activeUser?.id || \"\",\r\n        text,\r\n      });\r\n    },\r\n    [activeUser, activeChannel]\r\n  );\r\n\r\n  const handleSubmit = useCallback((): void => {\r\n    if (!sendingMessage && activeUser && activeChannel && draftMessage) {\r\n      postMessage({\r\n        variables: {\r\n          channelId: activeChannel.id,\r\n          userId: activeUser.id,\r\n          text: draftMessage.text,\r\n        },\r\n      });\r\n    }\r\n  }, [sendingMessage, activeUser, activeChannel, draftMessage]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <h2 className={classes.header} data-test=\"conversation-channel-name\">\r\n        {activeChannel?.name}\r\n      </h2>\r\n      <div className={classes.content}>\r\n        {messages.length > 0 ? <Messages /> : <Empty />}\r\n        {shownErrorPopup ? (\r\n          <div className={classes.errorPopup}>Cannot send the message</div>\r\n        ) : null}\r\n      </div>\r\n      <div className={classes.chatBox}>\r\n        <CKEditor\r\n          editor={ClassicEditor}\r\n          data={draftMessage?.text || \"\"}\r\n          onChange={(event, editor) => {\r\n            const data = editor.getData();\r\n            handleEditorChange(data);\r\n          }}\r\n          config={{\r\n            placeholder: \"Type your message here...\",\r\n          }}\r\n        />\r\n        <button\r\n          className={classes.sendButton}\r\n          title=\"Send message\"\r\n          disabled={sendingMessage || !draftMessage?.text}\r\n          onClick={handleSubmit}\r\n          data-test=\"conversation-submit-button\"\r\n        >\r\n          <i className=\"icon-plane\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Conversation);\r\n","import { createUseStyles } from \"react-jss\";\r\n\r\nimport { rem } from \"../../utils/jss\";\r\nimport COLORS from \"../../constants/COLORS\";\r\nimport BREAKPOINTS from \"../../constants/BREAKPOINTS\";\r\n\r\nexport default createUseStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    boxSizing: \"border-box\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: rem(16),\r\n    flex: \"none\",\r\n    height: rem(40),\r\n    backgroundColor: COLORS.bgBlack01,\r\n  },\r\n  logo: { display: \"block\", height: \"100%\", flex: \"none\" },\r\n  toggleButton: { display: \"none\" },\r\n  content: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    overflow: \"hidden\",\r\n    position: \"relative\",\r\n  },\r\n\r\n  [`@media only screen and (max-width: ${BREAKPOINTS.maxSm}px)`]: {\r\n    header: { justifyContent: \"space-between\" },\r\n    logo: { height: \"80%\" },\r\n    toggleButton: {\r\n      display: \"flex\",\r\n      marginLeft: rem(16),\r\n      backgroundColor: COLORS.bgWhite,\r\n      border: \"none\",\r\n      borderRadius: rem(4),\r\n      width: rem(30),\r\n      height: rem(30),\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n});\r\n","import React, { memo, useCallback, useEffect } from \"react\";\r\nimport { ApolloError, useLazyQuery } from \"@apollo/client\";\r\n\r\nimport { apiUtil } from \"../../utils\";\r\nimport { IChannel, IUser, IMessage } from \"../../models\";\r\nimport { useConversationContext } from \"../../providers/ConversationProvider\";\r\nimport avatar01 from \"../../assets/images/user-01.svg\";\r\nimport avatar02 from \"../../assets/images/user-02.svg\";\r\nimport avatar03 from \"../../assets/images/user-03.svg\";\r\n\r\nimport Sidebar from \"./Sidebar\";\r\nimport Conversation from \"./Conversation\";\r\nimport useStyles from \"./main.styles\";\r\n\r\nconst Main: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    users,\r\n    channels,\r\n    messages,\r\n    activeUser,\r\n    activeChannel,\r\n    activeSidebar,\r\n    setUsers,\r\n    setChannels,\r\n    setMessages,\r\n    setActiveUser,\r\n    setActiveChannel,\r\n    setActiveSidebar,\r\n  } = useConversationContext();\r\n\r\n  const handleFetchLatestMessagesSuccess = useCallback(\r\n    (data: { fetchLatestMessages: IMessage[] }): void => {\r\n      setMessages([...data.fetchLatestMessages]);\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleFetchLatestMessagesFailed = useCallback(\r\n    (error: ApolloError): void => {\r\n      // TODO show error cannot get list messages\r\n      window.alert(\"Cannot fetch messages\");\r\n      console.error(error);\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleFetchMoreMessagesSuccess = useCallback(\r\n    (data: { fetchMoreMessages: IMessage[] }): void => {\r\n      if (data.fetchMoreMessages.length > 0) {\r\n        setMessages([...messages, ...data.fetchMoreMessages]);\r\n        // Waiting messages update\r\n        setTimeout(() => {\r\n          const messagesBox = document.getElementById(\"messages-box\");\r\n          if (messagesBox) {\r\n            messagesBox.scrollTop = messagesBox.scrollHeight;\r\n          }\r\n        }, 100);\r\n      }\r\n    },\r\n    [messages, document]\r\n  );\r\n\r\n  const handleFetchMoreMessagesFailed = useCallback(\r\n    (error: ApolloError): void => {\r\n      // TODO show error cannot get list messages\r\n      window.alert(\"Cannot fetch more messages\");\r\n      console.error(error);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [\r\n    fetchLatestMessages,\r\n    { called: fetchLatestMessagesCalled, refetch: refetchLatestMessages },\r\n  ] = useLazyQuery<{\r\n    fetchLatestMessages: IMessage[];\r\n  }>(apiUtil.FETCH_LATEST_MESSAGES, {\r\n    onCompleted: handleFetchLatestMessagesSuccess,\r\n    onError: handleFetchLatestMessagesFailed,\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  const [\r\n    fetchMoreMessages,\r\n    { called: fetchMoreMessagesCalled, refetch: refetchMoreMessages },\r\n  ] = useLazyQuery<{\r\n    fetchMoreMessages: IMessage[];\r\n  }>(apiUtil.FETCH_MORE_MESSAGES, {\r\n    onCompleted: handleFetchMoreMessagesSuccess,\r\n    onError: handleFetchMoreMessagesFailed,\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  const initConversationValue = useCallback((): void => {\r\n    if (!users.length) {\r\n      const mockUsers: IUser[] = [\r\n        { id: \"Sam\", name: \"Sam\", avatar: avatar01 },\r\n        { id: \"Russell\", name: \"Russell\", avatar: avatar02 },\r\n        { id: \"Joyse\", name: \"Joyse\", avatar: avatar03 },\r\n      ];\r\n      setUsers(mockUsers);\r\n      if (!activeUser) setActiveUser(mockUsers[0]);\r\n    }\r\n    if (!channels.length) {\r\n      const mockChannels: IChannel[] = [\r\n        { id: \"1\", name: \"General Channel\" },\r\n        { id: \"2\", name: \"Technology Channel\" },\r\n        { id: \"3\", name: \"LGTM Channel\" },\r\n      ];\r\n      setChannels(mockChannels);\r\n      if (!activeChannel) {\r\n        setActiveChannel(mockChannels[0]);\r\n        fetchLatestMessages({ variables: { channelId: mockChannels[0].id } });\r\n      }\r\n    }\r\n  }, [users, channels, activeUser, activeChannel]);\r\n\r\n  useEffect((): void => {\r\n    initConversationValue();\r\n  }, [initConversationValue]);\r\n\r\n  useEffect((): (() => void) => {\r\n    const timer = setInterval((): void => {\r\n      if (activeChannel) {\r\n        if (messages.length > 0) {\r\n          const variables: { [key: string]: any } = {\r\n            channelId: activeChannel.id,\r\n            messageId: messages[messages.length - 1].messageId,\r\n            old: false,\r\n          };\r\n          if (fetchMoreMessagesCalled && refetchMoreMessages) {\r\n            refetchMoreMessages(variables);\r\n          } else {\r\n            fetchMoreMessages({ variables: variables });\r\n          }\r\n        } else {\r\n          if (fetchLatestMessagesCalled && refetchLatestMessages) {\r\n            refetchLatestMessages({ channelId: activeChannel.id });\r\n          } else {\r\n            fetchLatestMessages({ variables: { channelId: activeChannel.id } });\r\n          }\r\n        }\r\n      }\r\n    }, 5000);\r\n\r\n    return (): void => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [\r\n    messages,\r\n    activeChannel,\r\n    fetchMoreMessagesCalled,\r\n    fetchLatestMessagesCalled,\r\n  ]);\r\n\r\n  const handleToggleMenu = useCallback((): void => {\r\n    setActiveSidebar(!activeSidebar);\r\n  }, [activeSidebar]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <img\r\n          alt=\"Anymind\"\r\n          src=\"https://anymindgroup.com/wp-content/themes/anymind/img/logo_white.svg\"\r\n          className={classes.logo}\r\n          data-test=\"main-logo\"\r\n        />\r\n        {!activeSidebar ? (\r\n          <button className={classes.toggleButton} onClick={handleToggleMenu}>\r\n            <i className=\"icon-hamberger\" />\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n      <div className={classes.content}>\r\n        <Sidebar />\r\n        <Conversation />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Main);\r\n","import React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://angular-test-backend-yc4c5cvnnq-an.a.run.app/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\ninterface IProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Provider: React.FC<IProps> = ({ children }) => (\r\n  <ApolloProvider client={client}>{children}</ApolloProvider>\r\n);\r\n\r\nexport default Provider;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"./assets/font-icons/style.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Main from \"./containers/Main\";\nimport { ApolloProvider, ConversationProvider } from \"./providers\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <ConversationProvider>\n    <ApolloProvider>\n      <Main />\n    </ApolloProvider>\n  </ConversationProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}